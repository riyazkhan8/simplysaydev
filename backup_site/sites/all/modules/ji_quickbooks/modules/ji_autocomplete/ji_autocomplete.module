<?php

/**
 * @file
 * Define enhanced autocomplete widget.
 */

/**
 * Implements hook_element_info().
 */
function ji_autocomplete_element_info() {
  $types['ji_autocomplete'] = array(
    '#input' => TRUE,
    '#value_callback' => 'ji_autocomplete_value',
    '#pre_render' => array('form_pre_render_conditional_form_element'),
    '#process' => array('ji_autocomplete_element_process'),
  );
  return $types;
}

/**
 * Generates the basic form elements and javascript settings.
 */
function ji_autocomplete_element_process($element) {
  $element['#attached'] = array(
    'library' => array(
      array(
        'system',
        'ui.autocomplete',
      ),
      array(
        'system',
        'ui.button',
      ),
    ),
    'js' => array(drupal_get_path('module', 'ji_autocomplete') . '/ji_autocomplete.js'),
    'css' => array(drupal_get_path('module', 'ji_autocomplete') . '/ji_autocomplete.css'),
  );
  // Workaround for problems with jquery css in seven theme.
  if ($GLOBALS['theme'] == 'seven') {
    $element['#attached']['css'][] = drupal_get_path('module', 'ji_autocomplete') . '/ji_autocomplete.seven.css';
  }

  $html_id = drupal_html_id('ji-autocomplete-input');

  $element['#after_build'][] = 'ji_autocomplete_after_build';

  // Set default options for multiple values.
  $element['#multiple'] = isset($element['#multiple']) ? $element['#multiple'] : FALSE;

  $element['textfield'] = array(
    '#type' => 'textfield',
    '#size' => isset($element['#size']) ? $element['#size'] : '',
    '#attributes' => array(
      'class' => array('ji-autocomplete-form'),
      'id' => array($html_id),
      'rowid' => isset($element['#rowid']) ? $element['#rowid'] : '',
    ),
    '#default_value' => '',
    '#prefix' => '<div class="ji-autocomplete-container">',
    '#suffix' => '</div>',
  );

  $js_settings['ji_autocomplete'][$html_id] = array(
    'input_id' => $html_id,
    'required' => $element['#required'],
    'limit' => isset($element['#limit']) ? $element['#limit'] : 10,
    'min_length' => isset($element['#min_length']) ? $element['#min_length'] : 0,
    'delimiter' => isset($element['#delimiter']) ? $element['#delimiter'] : '',
    'not_found_message' => isset($element['#not_found_message']) ? $element['#not_found_message'] : "'@term' not found",
  );

  if (isset($element['#ji_autocomplete_path'])) {
    if (isset($element['#default_value'])) {
      // Split on the comma only if that comma has zero, or
      // an even number of quotes in ahead of it.
      // http://stackoverflow.com/questions/1757065/java-splitting-a-comma-separated-string-but-ignoring-commas-in-quotes
      $default_value = preg_replace('/,(?=([^\"]*\"[^\"]*\")*[^\"]*$)/i', '"" ""', $element['#default_value']);
      $default_value = '""' . $default_value . '""';
    }
    else {
      $default_value = '';
    }

    $element['textfield']['#default_value'] = isset($element['#default_value']) ? $element['#default_value'] : '';

    $js_settings['ji_autocomplete'][$html_id] += array(
      'type' => 'ajax',
      'uri' => $element['#ji_autocomplete_path'],
    );
  }
  else {
    // If there is no source (path or data), we don't want to add the js
    // settings and so the functions will be abborted.
    return $element;
  }
  $element['#attached']['js'][] = array('data' => $js_settings, 'type' => 'setting');
  $element['#tree'] = TRUE;

  return $element;
}

/**
 * Helper function.
 *
 * Helper function to determine the value for a autocomplete form
 * element.
 */
function ji_autocomplete_value(&$element, $input = FALSE, $form_state = NULL) {
  // This runs before child elements are processed, so we cannot calculate the
  // value here. But we have to make sure the value is an array, so the form
  // API is able to process the children to set their values in the array. Thus
  // once the form API has finished processing the element, the value is an
  // array containing the child element values. Then finally the after build
  // callback converts it back to the numeric value and sets that.
  return array();
}

/**
 * FAPI after build callback for the duration parameter type form.
 *
 * Fixes up the form value by applying the multiplier.
 */
function ji_autocomplete_after_build($element, &$form_state) {
  // By default drupal sets the maxlength to 128 if the property isn't
  // specified, but since the limit isn't useful in some cases,
  // we unset the property.
  unset($element['textfield']['#maxlength']);

  // Set the elements value from either the value field or
  // text field input.
  $element['#value'] = isset($element['value_field']) ? $element['value_field']['#value'] : $element['textfield']['#value'];

  if (isset($element['value_field'])) {
    $element['#value'] = trim($element['#value']);
    // Replace all double double quotes and space with a comma.
    // This will allows us to keep entries in double quotes.
    $element['#value'] = str_replace('"" ""', ',', $element['#value']);
    $element['#value'] = str_replace('""  ""', ',', $element['#value']);
    // Remove the double quotes at the beginning and the end
    // from the first and the last term.
    $element['#value'] = substr($element['#value'], 2, strlen($element['#value']) - 4);

    unset($element['value_field']['#maxlength']);
  }

  form_set_value($element, $element['#value'], $form_state);
  return $element;
}
